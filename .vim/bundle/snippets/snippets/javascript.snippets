# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${0:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${0}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${0}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${2}
	} 
# else if
snippet eif
	else if (${1:false}) {
		${2}
	} 
#else
snippet els
	else {
		${1}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log
snippet cl
	console.log("${1:the thing}", ${2:$1})
# Ember Logger
snippet el
	Ember.Logger.log(${0})
# console.trace
snippet clt
	console.trace(${0:'wtf?'})
# console.log with json pretty stringify
snippet cls
	console.log(JSON.stringify(${1}, null, 2), '${2:bug}')
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON.parse
snippet jsp
	JSON.parse(${0:jst})
# JSON.stringify
snippet jst
	JSON.stringify(${0:object}, null, 2)
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0}
		};
	};
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		"${2:property}",
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
# avrs avrs.backbone
snippet ab
	avrs.backbone.
# avrs avrs.backbone.models
snippet abm
	avrs.backbone.models.
# avrs avrs.backbone.collections
snippet abc
	avrs.backbone.collections.
# avrs avrs.backbone.classes
snippet abcl
	avrs.backbone.classes.
# avrs avrs.backbone.views
snippet abv
	avrs.backbone.views.
# avrs basemodel
snippet abbm
	avrs.backbone.classes.BaseModel.extend({
		${1}
	});
# avrs basecollection
snippet abbc
	avrs.backbone.classes.BaseCollection.extend({
		${1}
	});
# avrs baseview
snippet abbv
	avrs.backbone.classes.BaseView.extend({
		${1}
	});
# avrs backbone function
snippet bfun
	${1:function_name}: function (${2:arguments}) {
		${3}
	},
# backbone get
snippet get
	.get('${1:property}')
# backbone set
snippet set
	.set('${1:property}', ${2:value});
# avrs data-inverse-navigation
snippet din
	data-inverse-navigation="${0}"
# casper current path
snippet cp
	transactions/form/register-new-vehicle/
# then
snippet th
	.then(function (${1}) {
		${2:body}
	})
# casper test comment
snippet cc
	this.test.comment('${1:comment} %ln%');
# casper start
snippet cs
	casper.start();
	casper.viewport(1600, 900);
	casper.userAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:7.0.1) Gecko/20100101 Firefox/7.0.1');
# casper run
snippet cr
	casper.run(function() {
		casper.test.done();
	});
# casper open v2
snippet co2
	this.open(testDomain + 'v2debug/transactions/form/${1:register-new-vehicle}/');
# casper open v1
snippet co1
	this.open(testDomain + '${1:form_name}.php');
# casper login
snippet li
	this.loginEmployee();
# casper logout
snippet lo
	this.logout();
# casper grab
snippet cg
	this.grab('${1:register_new}', '${2:screenshotcomment} %ln%');
# casper wait for ajax
snippet wfa
	this.waitForAjax();
# casper click
snippet ck
	this.click('${1:selector}');
# casper assert selector has text
snippet asht
	this.test.assertSelectorHasText('${1:selector}', '${2:text}');
# casper fill
snippet cf
	this.fill('${1:transactionform form.form-horizontal}', 
			  { ${2:fields} }, ${3:false});
# casper wait for selector
snippet wfs
	this.waitForSelector('${1:selector}');
# casper assert visible
snippet av
	this.test.assertVisible('${1:selector}', 
							'${2:comment} %ln%');
# casper assert not visible
snippet anv
	this.test.assertNotVisible('${1:selector}', 
							   '${2:comment} %ln%');
# casper evaluate
snippet ev
	this.evaluate(function () {
		${0}
	});
# casper assert http status
snippet ahs
	this.test.assertHttpStatus(${1:200}, '${2:comment}');
#casper asser equals
snippet ae
	this.test.assertEquals(getJqueryCallback('${1:selector}', this).${2:val}, 
						   '${3:expected result}', 
						   '${4:comment} %ln%');
# casper get jquery callback
snippet gjc
	this.getJqueryCallback('${1:selector}' this).${2:val}, '${3:expected}', '${4:comment} %ln%');
# casper form state setup
snippet fss
	casper.v2transactions = {
		${1:form_name}: {},
		fieldCount:0
	};
	casper.v2transactions.$1 = avrs.transactionParams;
	casper.v2transactions.$1.states.${2:state_name} = casper.v2transactions.$1.states.default;
	casper.v2transactions.$1.states.$2.fields = casper.v2transactions.$1.states.$2.fields.extend({
	//avrs.test.getVisibleFields() and compare to v1
	});

	casper.then(function () {
		loginEmployee();
	})
	.then(function () {
		this.open(testDomain + 'v2debug/transactions/form/${3:form_path}/');
	})
	//$2
	.then(function () {
		this.validateTransactionFormState(casper.v2transactions.$1.states.$2);
	})
	.then(function () {
		this.grab('$1', '$2 state validated %ln%');
	})
	.then(function () {
		this.logout();
	})
# casper field
snippet fe
	"${1:field_name}": 
		{initVis: ${2:true}, required: ${3:false}, initData: "${4}"}
# casper fills
snippet fi
	casper.v2transactions.${1:form_name}.fills.${2:state_name} = {
	${3:fills}
	}
	
	//$2
	.then(function () {
		this.open(testDomain + 'v2/${4:transactions/form/register-new-vehicle/}');
	})
	.then(function () {
		this.fill('transactionform form', casper.v2transactions.$1.fills.$2);
	})
	.then(function () {
		this.grab('$1', '$2 state validated %ln%');
	})
	.then(function () {
	${5:assert_equals}
	})
# casper validate state
snippet vs
	this.validateTransactionFormState(casper.v2transactions.${1:form_name}.states.${2:state_name});
# casper make v2 screenshot comparison
snippet v2
	//${1:form_name}
	.then(function () {
		this.open(testDomain + '${2:formName}.php');
	})
	.then(function () {
		this.grab('v2 screenshots', '$1 v1 %ln%');
	})
	.then(function () {
		this.open(testDomain + 'v2debug/transactions/form/$1/');
	})
	.then(function () {
		this.evaluate(function () {
			avrs.test.labelValidations();
		});
	})
	.then(function () {
		this.grab('v2 screenshots', '$1 v2 %ln%');
	})
	.then(function () {
		this.open(testDomain + '$2.php');
	})
	.then(function () {
		this.click('#lienholder_button');
	})
	.then(function () {
		this.grab('v2 screenshots', '$1 v1 lienholder %ln%');
	})
	.then(function () {
		this.open(testDomain + 'v2debug/transactions/form/$1/');
	})
	.then(function () {
		this.click('[data-target=".lienholder"]');
	})
	.then(function () {
		this.evaluate(function () {
			avrs.test.labelValidations();
		})
	})
	.then(function () {
		this.grab('v2 screenshots', '$1 v2 lienholder %ln%');
	})
# node module exports object
snippet mxo
	module.exports = {
		${0}
	};
# node module exports function
snippet mxf
	module.exports = function (${1}) {
		${2}
	}
# random number/name generator
snippet rnd
	\`thing ${Math.floor(Math.random() * ${1:1000})}\`

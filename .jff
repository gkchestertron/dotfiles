export VISUAL=vim
export EDITOR="$VISUAL"
export TERM='xterm-256color'
set -o vi

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

platform=`uname`
if [ "$platform" = "Linux" ]; then
  if [ ! -z "$(which setxkbmap)" ]; then
    setxkbmap -option caps:ctrl_modifier
  fi
fi

alias nerd='vim -c Nerd'
alias lsd='ls -AGloh'
alias status='clear; git branch -vv; git status -uno'
alias commit='git add -A; git commit'

_gogo-usage() {
  cat<<HERE
  usage:

  gogo <path> - will search java and go (and go/xp) repos for folder and cd to it
HERE
}

javadir=/Users/jfellman/Development/java
godir=/Users/jfellman/Development/go/src/square/up
xpdir=/Users/jfellman/Development/go/src/square/up/xp
githubdir=/Users/jfellman/Development/go/src/github.com/square

gogo() {
  path=$1

  if [ -z "$1" ]; then
    _gogo-usage
  elif [ "$1" = "go" ] && [ -z "$2" ]; then
    cd $godir
  elif [ "$1" = "xp" ] && [ -z "$2" ]; then
    cd $xpdir
  elif [ "$1" = "java" ] && [ -z "$2" ]; then
    cd $javadir
  elif [ -z "$2" ]; then
    javas=`ls $javadir | grep $1`
    gos=`ls $godir | grep $1`
    xps=`ls $xpdir | grep $1`
  else
    if [ "$1" = "go" ]; then
      gogodir=$godir
    elif [ "$1" = "xp" ]; then
      gogodir=$xpdir
    elif [ "$1" = "java" ]; then
      gogodir=$javadir
    elif [ "$1" = "github" ]; then
      gogodir=$githubdir
    fi

    repos=`ls $gogodir | grep $2`

    if [ "${#repos[@]}" = "1" ]; then
      // TODO implement subfolders
      cd $gogodir/${repos[0]}
    fi
  fi
}

_gogo-completion() {
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  dir="${COMP_WORDS[1]}" 
  proj="${COMP_WORDS[2]}"

  if [ -z "$dir" ] || [ "$dir" = "$cur" ]; then
    words="go xp java github"
  else
    if [ "$dir" = "go" ]; then
      gogodir=$godir
    elif [ "$dir" = "xp" ]; then
      gogodir=$xpdir
    elif [ "$dir" = "java" ]; then
      gogodir=$javadir
    elif [ "$dir" = "github" ]; then
      gogodir=$githubdir
    fi
    if [ -z "$proj" ] || [ "$proj" = "$cur" ]; then
      words=`cd $gogodir && ls -d */ | sed 's/\///'`
      words="${words[@]}"
    else
      if [ -z "$cur" ]; then
        projpath="$gogodir/$(echo ${COMP_WORDS[@]:2} | sed 's/ /\//g')"
      else
        projpath="$gogodir/$(echo ${COMP_WORDS[@]:2:COMP_CWORD-2} | sed 's/ /\//g')"
      fi
      words=`cd $projpath && ls -d */ 2>/dev/null | sed 's/\///g'`
    fi
  fi
  COMPREPLY=( $(compgen -W "${words}" -- ${cur}) )
}

# complete -F _gogo-completion gogo

# read from stdin or passed in list of filenames and open in vim
vimp () {
  # set some options
  cmd="set modifiable | set statusline=%F | set laststatus=2 | copen"
  qflist=""

  # if we've been passed args (stdin is empty)
  if [ -t 0 ]
  then
    for file in "$@"
    do
      # add current working dir to relative paths
      if [ -z $(echo "$file" | grep "^\/") ]
      then
        file="$(pwd)/$file"
      fi

      # linenumber
      nums=( $(echo "$file" | grep -o ':[0-9][0-9]*' | sed 's/://g') )
      lnum=${nums[0]}
      cnum=${nums[1]}
      if [ -z "$cnum" ]
      then
        cnum=1
      fi

      if [ -z "$lnum" ]
      then
        lnum=1
      fi

      # strip extras from file
      file=$(echo $file | sed 's/:.*$//')

      # add to quickfix list for vim
      qflist="$qflist {\"filename\":\"$file\", \"lnum\": $lnum, \"col\": $cnum},"
    done

    # set command and open quickfix list in vim
    cmd="call setqflist([$qflist]) | $cmd"
    vim -c "$cmd"

  # if we're taking stdin
  else
    while read file
    do
      # add current working dir to relative paths
      if [ -z $(echo "$file" | grep "^\/") ]
      then
        file="$(pwd)/$file"
      fi

      # linenumber
      nums=( $(echo "$file" | grep -o ':[0-9][0-9]*' | sed 's/://g') )
      lnum=${nums[0]}
      cnum=${nums[1]}
      if [ -z "$cnum" ]
      then
        cnum=1
      fi

      if [ -z "$lnum" ]
      then
        lnum=1
      fi

      # strip extras from file
      file=$(echo $file | sed 's/:.*$//')

      # add to quickfix list for vim
      qflist="$qflist {\"filename\":\"$file\", \"lnum\": $lnum, \"col\": $cnum},"
    done

    # set command and open quickfix list in vim (passing - to let vim know we're coming from stdin)
    cmd="call setqflist([$qflist]) | $cmd"
    vim - -c "$cmd"
  fi
}

# open conflicts in vim
miff () {
  diff=$1
  input=`git status | grep 'both modified' | awk '{print $(NF)}'`
  files=""

  while read -r line
  do
    files="$files {\"filename\":\"$line\", \"lnum\":1},"
  done <<< "$input"

  vim -c "call setqflist([$files]) | copen"
}

# Git branch in prompt.

parse_git_branch() {
  branch=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'`
  BPSO=`echo $branch | grep -oE 'BPSO-\d+'`

	if [ -z $branch ]
  then
    echo " "
  elif [ -z $BPSO ]
  then
    echo "$branch"
  else
    echo "($BPSO)"
  fi
}

autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{240}(%b)%r%f'
zstyle ':vcs_info:*' enable git
PROMPT='%(?.%F{green}âˆš.%F{red}?%?)%f %B%F{240}%1~%f%b %# '

pyserv () {
  if [ ! -z "$1" ]
  then
    PORT=$1
  else
    PORT=8000
  fi

  echo $PORT
  echo "http://localhost:$PORT"

  python -m SimpleHTTPServer $PORT & open "http://localhost:$PORT"
}

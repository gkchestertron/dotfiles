export VISUAL=vim
export EDITOR="$VISUAL"
export TERM='xterm-256color'
set -o vi

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

platform=`uname`
if [ "$platform" = "Linux" ]; then
  if [ ! -z "$(which setxkbmap)" ]; then
    setxkbmap -option caps:ctrl_modifier
  fi
fi

alias nerd='vim -c Nerd'
alias lsd='ls -AGloh'
alias status='clear; git branch -vv; git status -uno'
alias commit='git add -A; git commit'
alias commend='git add -A; git commit --amend'

gogo() {
  dest="$1"
  subdest="$2"
  if [ -z "$dest" ]; then
    cd $HOME/Development
  elif [ "$dest" = "java" ]; then
    cd $HOME/Development/java
  elif [ "$dest" = "oas" ]; then
    cd $HOME/Development/go/src/github.com/squareup/xp-oas-pipeline
  elif [ "$dest" = "tf" ]; then
    cd $HOME/Development/TF
  elif [ "$dest" = "go" ]; then
    cd $HOME/Development/go/src/square/up
  fi

  if [ ! -z $subdest ]; then
    cd $subdest
  fi
}

_gogo_completions() {
  local cur="${COMP_WORDS[COMP_CWORD]}"

  if [ "${COMP_CWORD}" -eq 1 ]; then
    COMPREPLY=($(compgen -W "go java oas tf xp" -- "$cur"))
  else 
    local prev="${COMP_WORDS[COMP_CWORD - 1]}"
    local dir=""
    if [ $prev = "xp" ]; then
      dir="$HOME/Development/go/src/git.sqcorp.co/XP"
    elif [ $prev = "java" ]; then
      dir="$HOME/Development/java"
    elif [ $prev = "oas" ]; then
      dir="$HOME/Development/go/src/git.sqcorp.co/XP/oas-pipeline"
    elif [ $prev = "tf" ]; then
      dir="$HOME/Development/TF"
    elif [ $prev = "go" ]; then
      dir="$HOME/Development/go/src/square/up"
    fi
    local a=`cd $dir ; ls -d */`
    COMPREPLY=($(compgen -W "${a[@]}" -- "$cur"))
  fi
}


woot() {
	resetcolor="\033[0m"
	successcolor="\033[1;32m"
	warningcolor="\033[33m"

  printf "${successcolor}Woot! ${warningcolor}\( ﾟヮﾟ)/${resetcolor}\n"
}

# read from stdin or passed in list of filenames and open in vim
vimp () {
  # set some options
  cmd="set modifiable | set statusline=%F | set laststatus=2 | copen"
  qflist=""

  # if we've been passed args (stdin is empty)
  if [ -t 0 ]
  then
    for file in "$@"
    do
      # add current working dir to relative paths
      if [ -z $(echo "$file" | grep "^\/") ]
      then
        file="$(pwd)/$file"
      fi

      # linenumber
      nums=( $(echo "$file" | grep -o ':[0-9][0-9]*' | sed 's/://g') )
      lnum=${nums[0]}
      cnum=${nums[1]}
      if [ -z "$cnum" ]
      then
        cnum=1
      fi

      if [ -z "$lnum" ]
      then
        lnum=1
      fi

      # strip extras from file
      file=$(echo $file | sed 's/:.*$//')

      # add to quickfix list for vim
      qflist="$qflist {\"filename\":\"$file\", \"lnum\": $lnum, \"col\": $cnum},"
    done

    # set command and open quickfix list in vim
    cmd="call setqflist([$qflist]) | $cmd"
    vim -c "$cmd"

  # if we're taking stdin
  else
    while read file
    do
      # add current working dir to relative paths
      if [ -z $(echo "$file" | grep "^\/") ]
      then
        file="$(pwd)/$file"
      fi

      # linenumber
      nums=( $(echo "$file" | grep -o ':[0-9][0-9]*' | sed 's/://g') )
      lnum=${nums[0]}
      cnum=${nums[1]}
      if [ -z "$cnum" ]
      then
        cnum=1
      fi

      if [ -z "$lnum" ]
      then
        lnum=1
      fi

      # strip extras from file
      file=$(echo $file | sed 's/:.*$//')

      # add to quickfix list for vim
      qflist="$qflist {\"filename\":\"$file\", \"lnum\": $lnum, \"col\": $cnum},"
    done

    # set command and open quickfix list in vim (passing - to let vim know we're coming from stdin)
    cmd="call setqflist([$qflist]) | $cmd"
    vim - -c "$cmd"
  fi
}

# open conflicts in vim
miff () {
  diff=$1
  input=`git status | grep 'both modified' | awk '{print $(NF)}'`
  files=""

  while read -r line
  do
    files="$files {\"filename\":\"$line\", \"lnum\":1},"
  done <<< "$input"

  vim -c "call setqflist([$files]) | copen"
}

# Git branch in prompt.

parse_git_branch() {
  branch=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'`
  TCKT=`echo $branch | grep -oE '[A-Z]+-\d+'`

	if [ -z "$branch" ]
  then
    echo " "
  elif [ -z "$TCKT" ]
  then
    echo "$branch"
  else
    echo "($TCKT)"
  fi
}

autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{240}(%b)%r%f'
zstyle ':vcs_info:*' enable git
PROMPT='%(?.%F{green}√.%F{red}?%?)%f %B%F{240}%1~%f%b %# '

pyserv () {
  if [ ! -z "$1" ]
  then
    PORT=$1
  else
    PORT=8000
  fi

  echo $PORT
  echo "http://localhost:$PORT"

  python -m SimpleHTTPServer $PORT & open "http://localhost:$PORT"
}
